###
# AWS Cloudwatch
# You can override the specific CloudFormation resource to apply your own options. For example, if you want to set AWS::Logs::LogGroup retention time to 30 days, override it with above table's Name Template.

# When you do overriding the basic resources, the important part is normalizedFunctionName. There are two rules.

# Should start with uppercase character.
# The - will be changed to Dash, _ will be changed to Underscore.
###
ProcessDashdynamodbDashstreamLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

ProcessDashkinesisDashstreamLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

EventDashsnsDashhandlerLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

EventDashsnsDashpostLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

EventDashgetLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

EventsDashatomDashfeedLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

NotifyDashsubscriberLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

HandleDashdlqLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

HealthcheckLogGroup:
  Type: "AWS::Logs::LogGroup"
  Properties:
    RetentionInDays: "90"

###
# Kinesis Stream
###
BusinessEventStream:
  Type: 'AWS::Kinesis::Stream'
  Properties:
    Name: ${self:custom.prefix}-business-event-stream
    RetentionPeriodHours: 24
    ShardCount: 1
    Tags:
      - Key: Stream
        Value: ${self:custom.stream}
      - Key: Service
        Value: ${self:service}

BusinessEventDeadLetterSnsTopic:
  Type: "AWS::SNS::Topic"
  Properties:
    DisplayName: ${self:custom.prefix}-BusinessEvent-DLQ
    TopicName: ${self:custom.prefix}-BusinessEvent-DLQ    

###
# DynamoDB Table Business Events
###
BusinessEventTable:
  Type: 'AWS::DynamoDB::Table'
  DeletionPolicy: Retain
  Properties:
    TableName: ${self:custom.prefix}-BusinessEvent
    AttributeDefinitions:
      - AttributeName: MessageId
        AttributeType: S
      - AttributeName: Domain
        AttributeType: S
      - AttributeName: PublishedTimeStampUtc
        AttributeType: S
    KeySchema:
      - AttributeName: MessageId
        KeyType: HASH
      - AttributeName: PublishedTimeStampUtc
        KeyType: RANGE
    ProvisionedThroughput:
      ReadCapacityUnits: 10
      WriteCapacityUnits: 10
    StreamSpecification:
        StreamViewType: NEW_IMAGE
    GlobalSecondaryIndexes:
      - IndexName: gidx_Domain
        KeySchema:
          - AttributeName: Domain
            KeyType: HASH
          - AttributeName: PublishedTimeStampUtc
            KeyType: RANGE
        Projection:
          NonKeyAttributes:
            - CreatedTimeStampUtc
            - MessageType
            - CorrelationId
            - AggregateId
            - InstanceId
          ProjectionType: INCLUDE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
    Tags:
        - Key: Stream
          Value: ${self:custom.stream}
        - Key: Service
          Value: ${self:service}

ScalingRole:
  Type: "AWS::IAM::Role"
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        -
          Effect: "Allow"
          Principal:
            Service:
              - application-autoscaling.amazonaws.com
          Action:
            - "sts:AssumeRole"
    Path: "/"
    Policies:
      -
        PolicyName: "root"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
                - "dynamodb:DescribeTable"
                - "dynamodb:UpdateTable"
                - "cloudwatch:PutMetricAlarm"
                - "cloudwatch:DescribeAlarms"
                - "cloudwatch:GetMetricStatistics"
                - "cloudwatch:SetAlarmState"
                - "cloudwatch:DeleteAlarms"
              Resource: "*"

BusinessEventTableWriteCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
    MaxCapacity: 240
    MinCapacity: 10
    ResourceId:
      Fn::Join:
        - /
        - - table
          - Ref:
              BusinessEventTable
    RoleARN:
      Fn::GetAtt:
         - ScalingRole
         - Arn
    ScalableDimension: dynamodb:table:WriteCapacityUnits
    ServiceNamespace: dynamodb

BusinessEventTableWriteScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
    PolicyName: WriteAutoScalingPolicy
    PolicyType: TargetTrackingScaling
    ScalingTargetId:
      Ref: BusinessEventTableWriteCapacityScalableTarget
    TargetTrackingScalingPolicyConfiguration:
      TargetValue: 50.0
      # The amount of time, in seconds, after a scale in activity completes before another scale in activity can start.
      ScaleInCooldown: 60
      # he amount of time, in seconds, after a scale out activity completes before another scale out activity can start.
      ScaleOutCooldown: 60
      PredefinedMetricSpecification:
        PredefinedMetricType: DynamoDBWriteCapacityUtilization

BusinessEventTableReadCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
    MaxCapacity: 200
    MinCapacity: 10
    ResourceId:
      Fn::Join:
        - /
        - - table
          - Ref:
              BusinessEventTable
    RoleARN:
      Fn::GetAtt:
         - ScalingRole
         - Arn
    ScalableDimension: dynamodb:table:ReadCapacityUnits
    ServiceNamespace: dynamodb

BusinessEventTableReadScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
    PolicyName: ReadAutoScalingPolicy
    PolicyType: TargetTrackingScaling
    ScalingTargetId:
      Ref: BusinessEventTableReadCapacityScalableTarget
    TargetTrackingScalingPolicyConfiguration:
      TargetValue: 50.0
      ScaleInCooldown: 60
      ScaleOutCooldown: 60
      PredefinedMetricSpecification:
        PredefinedMetricType: DynamoDBReadCapacityUtilization

BusinessEventTableGlobalIndexMessageTypeReadCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
    MaxCapacity: 200
    MinCapacity: 10
    ResourceId:
      Fn::Join:
        - /
        - - table
          - Ref:
              BusinessEventTable
          - index
          - gidx_Domain
    RoleARN:
      Fn::GetAtt:
         - ScalingRole
         - Arn
    ScalableDimension: dynamodb:index:ReadCapacityUnits
    ServiceNamespace: dynamodb

BusinessEventTableGlobalIndexMessageTypeReadScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
    PolicyName: ReadAutoScalingPolicy
    PolicyType: TargetTrackingScaling
    ScalingTargetId:
      Ref: BusinessEventTableGlobalIndexMessageTypeReadCapacityScalableTarget
    TargetTrackingScalingPolicyConfiguration:
      TargetValue: 50.0
      ScaleInCooldown: 60
      ScaleOutCooldown: 60
      PredefinedMetricSpecification:
        PredefinedMetricType: DynamoDBReadCapacityUtilization

BusinessEventTableGlobalIndexMessageTypeWriteCapacityScalableTarget:
  Type: "AWS::ApplicationAutoScaling::ScalableTarget"
  Properties:
    MaxCapacity: 120
    MinCapacity: 10
    ResourceId:
      Fn::Join:
        - /
        - - table
          - Ref:
              BusinessEventTable
          - index
          - gidx_Domain
    RoleARN:
      Fn::GetAtt:
         - ScalingRole
         - Arn
    ScalableDimension: dynamodb:index:WriteCapacityUnits
    ServiceNamespace: dynamodb

BusinessEventTableGlobalIndexMessageTypeWriteScalingPolicy:
  Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
  Properties:
    PolicyName: WriteAutoScalingPolicy
    PolicyType: TargetTrackingScaling
    ScalingTargetId:
      Ref: BusinessEventTableGlobalIndexMessageTypeWriteCapacityScalableTarget
    TargetTrackingScalingPolicyConfiguration:
      TargetValue: 50.0
      ScaleInCooldown: 60
      ScaleOutCooldown: 60
      PredefinedMetricSpecification:
        PredefinedMetricType: DynamoDBWriteCapacityUtilization
