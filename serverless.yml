custom:
  stream: {PUT_STREAM_NAME_HERE}
  s3BucketName: {PUT_S3_BUCKET_NAME_HERE}
  prefix: {PUT_SERVICE_PREFIX_HERE}
  vars: ${file(./serverless-environment-variables.yml)}
  vars: ${file(./serverless-environment-variables-sample.yml)}

service:
  name: ${self:custom.prefix}-BusinessEventBus
  awsKmsKeyArn: ${self:custom.vars.${opt:data-center}.KMS_KEY_ARN}

provider:
  name: aws
  runtime: dotnetcore1.0
  memorySize: 1024
  timeout: 300
  stage: v1
  region: ap-southeast-2
  deploymentBucket: pageup-serverless-${opt:data-center}-deploy

  environment:
    SERVICE: ${self:service}
    PREFIX: ${self:custom.prefix}
    STREAM: ${self:custom.stream}
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    DATA_CENTER: ${opt:data-center}
    AUTH_ENDPOINT: ${self:custom.vars.${opt:data-center}.AUTH_ENDPOINT}
    DATA_ENCRYPTION_KEY: ${self:custom.vars.${opt:data-center}.DATA_ENCRYPTION_KEY}
    DLQ:
      Fn::GetAtt:
        - BusinessEventDeadLetterQueue
        - QueueName
    DLQ_SNS_Topic:
      Fn::GetAtt:
        - BusinessEventDeadLetterSnsTopic
        - TopicName

  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:*
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
        - logs:DescribeLogGroups
        - logs:DescribeLogStreams
        - s3:PutObject
        - s3:GetObject
        - s3:CreateBucket
        - s3:PutBucket
      Resource: "*"
    - Effect: Allow
      Action:
        - lambda:CreateAlias
        - lambda:Get*
        - lambda:Invoke*
        - lambda:List*
        - lambda:PublishVersion
        - lambda:TagResource
        - lambda:UntagResource
        - lambda:Update*
      Resource: arn:aws:lambda:*:*:function:*
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - arn:aws:dynamodb:*:*:table/BusinessEvent-Publishing-Meta
        - arn:aws:dynamodb:*:*:table/${self:custom.prefix}-BusinessEvent
        - arn:aws:dynamodb:*:*:table/${self:custom.prefix}-BusinessEvent/stream/*
        - arn:aws:dynamodb:*:*:table/${self:custom.prefix}-BusinessEvent/index/*
    - Effect: Allow
      Action:
        - kinesis:*
      Resource:
        Fn::GetAtt:
          - BusinessEventStream
          - Arn
    - Effect: Allow
      Action:
        - sqs:*
      Resource:
        Fn::GetAtt:
          - BusinessEventDeadLetterQueue
          - Arn
    - Effect: Allow
      Action:
        - xray:PutTelemetryRecords
        - xray:PutTraceSegments
      Resource: "*"

package:
  artifact: src/BusinessEvents.SubscriptionEngine.Handlers/bin/release/netcoreapp1.0/publish/deploy-package.zip

functions:
  process-dynamodb-stream:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::ProcessDynamoDbStream
    memorySize: 1536
    environment:
      AUTH_CLIENT_ID: ${self:custom.vars.${opt:data-center}.AUTH_CLIENT_ID}
      AUTH_CLIENT_SECRET: ${self:custom.vars.${opt:data-center}.AUTH_CLIENT_SECRET}
      NOTIFY_SUBSCRIBER_LAMBDA_NAME: ${self:service}-${opt:stage}-notify-subscriber
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
               - BusinessEventTable
               - StreamArn
          batchSize: 280
          startingPosition: LATEST
          enabled: true
    tags:
      Stream: ${self:custom.stream}
      Service: ${self:service}

  process-kinesis-stream:
    handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::ProcessKinesisStream
    memorySize: 1536
    events:
      - stream:
          type: kinesis
          arn:
            Fn::GetAtt:
               - BusinessEventStream
               - Arn
          batchSize: 280
          startingPosition: LATEST
          enabled: true
    tags:
      Stream: ${self:custom.stream}
      Service: ${self:service}
  
  notify-subscriber:
      handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::NotifySubscriber
      environment:
        AUTH_CLIENT_ID: ${self:custom.vars.${opt:data-center}.AUTH_CLIENT_ID}
        AUTH_CLIENT_SECRET: ${self:custom.vars.${opt:data-center}.AUTH_CLIENT_SECRET}
      tags:
        Stream: ${self:custom.stream}
        Service: ${self:service}

  handle-dlq:
        handler: BusinessEvents.SubscriptionEngine.Handlers::BusinessEvents.SubscriptionEngine.Handlers.Handler::HandleDeadLetterQueue
        events:
          - schedule:
              rate: rate(1 minute)
              enabled: true
        tags:
          Stream: ${self:custom.stream}
          Service: ${self:service}

resources:
  Resources: ${file(cloudformation-resources.yml)}
